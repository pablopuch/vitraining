---
const services = [
    "Iniciación Pilates y Yoga",
    "Entrenamiento funcional",
    "Entrenamiento personal",
];
---

<section id="trial-signup" class="bg-gray-50 py-16 md:py-20">
    <div class="max-w-xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h2
            class="text-3xl md:text-4xl font-bold text-gray-800 mb-4 animate-slide-up"
        >
            Reserva tu Clase de Prueba Gratis
        </h2>
        <p class="text-gray-600 text-lg mb-8 animate-fade-in">
            Descubre por qué el 30% de nuestros nuevos clientes empiezan por
            aquí. ¡Da el primer paso!
        </p>
        <form
            id="trial-form"
            class="bg-white p-8 rounded-lg shadow-lg space-y-6 animate-fade-in"
            name="trial-form"
            method="POST"
            data-netlify="true"
            novalidate
        >
            <input type="hidden" name="form-name" value="trial-form" />
            <div>
                <label for="name" class="sr-only">Tu nombre</label>
                <input
                    type="text"
                    name="name"
                    id="name"
                    placeholder="Tu nombre"
                    required
                    class="form-input"
                    autocomplete="name"
                    aria-describedby="name-error"
                />
                <div
                    id="name-error"
                    class="error-message hidden text-red-600 text-sm mt-1"
                >
                </div>
            </div>
            <div>
                <label for="email" class="sr-only">Tu correo electrónico</label>
                <input
                    type="email"
                    name="email"
                    id="email"
                    placeholder="Tu correo electrónico"
                    required
                    class="form-input"
                    autocomplete="email"
                    aria-describedby="email-error"
                />
                <div
                    id="email-error"
                    class="error-message hidden text-red-600 text-sm mt-1"
                >
                </div>
            </div>
            <div>
                <label for="service" class="sr-only">Servicio de interés</label>
                <select
                    name="service"
                    id="service"
                    required
                    class="form-input"
                    aria-describedby="service-error"
                >
                    <option value="" disabled selected
                        >Elige un servicio...</option
                    >
                    {
                        services.map((service) => (
                            <option value={service}>{service}</option>
                        ))
                    }
                </select>
                <div
                    id="service-error"
                    class="error-message hidden text-red-600 text-sm mt-1"
                >
                </div>
            </div>
            <div>
                <label for="message" class="sr-only">Mensaje (opcional)</label>
                <textarea
                    name="message"
                    id="message"
                    rows="4"
                    placeholder="Tu mensaje (opcional)"
                    class="form-input"
                    autocomplete="off"></textarea>
            </div>
            <button
                type="submit"
                id="submit-btn"
                class="w-full bg-[#ce2c3b] text-white font-bold py-3 px-6 rounded-lg text-lg hover:bg-[#a81f2a] transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
            >
                <span class="submit-text">¡Quiero mi clase de prueba!</span>
                <span class="loading-text hidden">Enviando...</span>
            </button>
        </form>
    </div>
</section>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("trial-form") as HTMLFormElement;
        const submitBtn = document.getElementById(
            "submit-btn",
        ) as HTMLButtonElement;
        const submitText = submitBtn?.querySelector(
            ".submit-text",
        ) as HTMLElement;
        const loadingText = submitBtn?.querySelector(
            ".loading-text",
        ) as HTMLElement;

        if (form && submitBtn) {
            // Validación en tiempo real
            const inputs = form.querySelectorAll(
                "input[required], select[required]",
            ) as NodeListOf<HTMLInputElement | HTMLSelectElement>;

            inputs.forEach((input) => {
                input.addEventListener("blur", validateField);
                input.addEventListener("input", clearError);
            });

            form.addEventListener("submit", handleSubmit);
        }

        function validateField(e: Event) {
            const target = e.target as HTMLInputElement | HTMLSelectElement;
            const errorElement = document.getElementById(`${target.id}-error`);

            if (!target.checkValidity()) {
                showError(target, errorElement);
            } else {
                hideError(errorElement);
            }
        }

        function showError(
            input: HTMLInputElement | HTMLSelectElement,
            errorElement: HTMLElement | null,
        ) {
            if (errorElement) {
                errorElement.textContent = input.validationMessage;
                errorElement.classList.remove("hidden");
                input.classList.add("border-red-500");
            }
        }

        function hideError(errorElement: HTMLElement | null) {
            if (errorElement) {
                errorElement.classList.add("hidden");
                const input = document.getElementById(
                    errorElement.id.replace("-error", ""),
                ) as HTMLInputElement;
                if (input) {
                    input.classList.remove("border-red-500");
                }
            }
        }

        function clearError(e: Event) {
            const target = e.target as HTMLInputElement | HTMLSelectElement;
            const errorElement = document.getElementById(`${target.id}-error`);
            hideError(errorElement);
        }

        function handleSubmit(e: Event) {
            e.preventDefault();

            if (!form.checkValidity()) {
                // Mostrar todos los errores
                const formInputs = form.querySelectorAll(
                    "input[required], select[required]",
                ) as NodeListOf<HTMLInputElement | HTMLSelectElement>;
                formInputs.forEach((input) => {
                    const errorElement = document.getElementById(
                        `${input.id}-error`,
                    );
                    if (!input.checkValidity()) {
                        showError(input, errorElement);
                    }
                });
                return;
            }

            // Mostrar estado de carga
            submitBtn.disabled = true;
            submitText?.classList.add("hidden");
            loadingText?.classList.remove("hidden");

            // Simular envío (reemplazar con lógica real)
            setTimeout(() => {
                alert("¡Gracias! Te contactaremos pronto.");
                form.reset();
                submitBtn.disabled = false;
                submitText?.classList.remove("hidden");
                loadingText?.classList.add("hidden");
            }, 2000);
        }
    });
</script>

<style>
    .form-input {
        width: 100%;
        padding: 1rem;
        border: 1px solid #d1d5db;
        border-radius: 0.5rem;
        font-size: 1rem;
        transition:
            border-color 0.3s,
            box-shadow 0.3s;
    }
    .form-input:focus {
        outline: none;
        border-color: #ce2c3b;
        box-shadow: 0 0 0 3px rgba(206, 44, 59, 0.2);
    }
    .form-input.border-red-500 {
        border-color: #ef4444;
        box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.2);
    }
    .error-message {
        animation: slideDown 0.3s ease-out;
    }
    @keyframes slideDown {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>
